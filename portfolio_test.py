import requests
import sys
import json
from datetime import datetime

class PortfolioAPITester:
    def __init__(self, base_url="https://sa-freelance-hub.preview.emergentagent.com"):
        self.base_url = base_url
        self.freelancer_token = None
        self.client_token = None
        self.admin_token = None
        self.freelancer_user = None
        self.client_user = None
        self.admin_user = None
        self.tests_run = 0
        self.tests_passed = 0

    def run_test(self, name, method, endpoint, expected_status, data=None, token=None):
        """Run a single API test"""
        url = f"{self.base_url}{endpoint}"
        headers = {'Content-Type': 'application/json'}
        if token:
            headers['Authorization'] = f'Bearer {token}'

        self.tests_run += 1
        print(f"\nüîç Testing {name}...")
        print(f"   URL: {url}")
        
        try:
            if method == 'GET':
                response = requests.get(url, headers=headers, timeout=10)
            elif method == 'POST':
                response = requests.post(url, json=data, headers=headers, timeout=10)
            elif method == 'PUT':
                response = requests.put(url, json=data, headers=headers, timeout=10)
            elif method == 'PATCH':
                response = requests.patch(url, json=data, headers=headers, timeout=10)

            success = response.status_code == expected_status
            if success:
                self.tests_passed += 1
                print(f"‚úÖ Passed - Status: {response.status_code}")
                try:
                    return success, response.json()
                except:
                    return success, {}
            else:
                print(f"‚ùå Failed - Expected {expected_status}, got {response.status_code}")
                try:
                    error_detail = response.json()
                    print(f"   Error: {error_detail}")
                except:
                    print(f"   Response: {response.text}")
                return False, {}

        except Exception as e:
            print(f"‚ùå Failed - Error: {str(e)}")
            return False, {}

    def setup_test_users(self):
        """Set up test users for portfolio testing"""
        print("\nüîß SETTING UP TEST USERS FOR PORTFOLIO TESTING")
        print("-" * 50)
        
        # Register freelancer
        timestamp = datetime.now().strftime('%H%M%S')
        freelancer_data = {
            "email": f"portfolio.freelancer{timestamp}@gmail.com",
            "password": "PortfolioTest123!",
            "role": "freelancer",
            "full_name": "Portfolio Test Freelancer",
            "phone": "+27823456789"
        }
        
        success, response = self.run_test(
            "Setup - Register Freelancer",
            "POST",
            "/api/register",
            200,
            data=freelancer_data
        )
        
        if success and 'token' in response:
            self.freelancer_token = response['token']
            self.freelancer_user = response['user']
            print(f"‚úÖ Freelancer registered: {self.freelancer_user['full_name']}")
        else:
            print("‚ùå Failed to register freelancer")
            return False
        
        # Register client
        client_data = {
            "email": f"portfolio.client{timestamp}@gmail.com",
            "password": "ClientTest123!",
            "role": "client",
            "full_name": "Portfolio Test Client",
            "phone": "+27834567890"
        }
        
        success, response = self.run_test(
            "Setup - Register Client",
            "POST",
            "/api/register",
            200,
            data=client_data
        )
        
        if success and 'token' in response:
            self.client_token = response['token']
            self.client_user = response['user']
            print(f"‚úÖ Client registered: {self.client_user['full_name']}")
        else:
            print("‚ùå Failed to register client")
        
        # Register admin
        admin_data = {
            "email": f"portfolio.admin{timestamp}@afrilance.co.za",
            "password": "AdminTest123!",
            "role": "admin",
            "full_name": "Portfolio Test Admin",
            "phone": "+27845678901"
        }
        
        success, response = self.run_test(
            "Setup - Register Admin",
            "POST",
            "/api/register",
            200,
            data=admin_data
        )
        
        if success and 'token' in response:
            self.admin_token = response['token']
            self.admin_user = response['user']
            print(f"‚úÖ Admin registered: {self.admin_user['full_name']}")
        else:
            print("‚ùå Failed to register admin")
        
        return True

    def test_portfolio_showcase_system(self):
        """Test Phase 2 Portfolio Showcase System endpoints"""
        print("\nüé® TESTING PHASE 2 PORTFOLIO SHOWCASE SYSTEM")
        print("=" * 60)
        
        portfolio_tests_passed = 0
        portfolio_tests_total = 0
        
        # Ensure we have a freelancer with portfolio data
        if not self.freelancer_token:
            print("‚ùå No freelancer token available for portfolio tests")
            return 0, 0
        
        # Test 1: Enhanced Portfolio Showcase - GET /api/portfolio/showcase/{freelancer_id}
        portfolio_tests_total += 1
        success, response = self.run_test(
            "Portfolio Showcase - Get Enhanced Portfolio Data",
            "GET",
            f"/api/portfolio/showcase/{self.freelancer_user['id']}",
            200
        )
        
        if success and 'freelancer' in response and 'portfolio_stats' in response:
            portfolio_tests_passed += 1
            print(f"   ‚úì Portfolio showcase data retrieved successfully")
            print(f"   ‚úì Freelancer: {response['freelancer'].get('full_name', 'Unknown')}")
            print(f"   ‚úì Total portfolio files: {response['portfolio_stats'].get('total_portfolio_files', 0)}")
            print(f"   ‚úì Total projects: {response['portfolio_stats'].get('total_projects', 0)}")
            print(f"   ‚úì Portfolio completion: {response['portfolio_stats'].get('portfolio_completion', 0)}%")
            print(f"   ‚úì Technology breakdown: {len(response.get('technology_breakdown', []))} technologies")
            print(f"   ‚úì Recent activity: {len(response.get('recent_activity', []))} items")
        else:
            print("   ‚ùå Portfolio showcase data retrieval failed")
        
        # Test 2: Featured Portfolios - GET /api/portfolio/featured
        portfolio_tests_total += 1
        success, response = self.run_test(
            "Portfolio Showcase - Get Featured Portfolios",
            "GET",
            "/api/portfolio/featured",
            200
        )
        
        if success and 'featured_portfolios' in response:
            portfolio_tests_passed += 1
            featured_count = len(response['featured_portfolios'])
            print(f"   ‚úì Featured portfolios retrieved: {featured_count} portfolios")
            print(f"   ‚úì Total featured: {response.get('total_featured', 0)}")
            print(f"   ‚úì Selection criteria: {response.get('selection_criteria', 'Unknown')}")
            
            # Check portfolio structure
            if featured_count > 0:
                sample_portfolio = response['featured_portfolios'][0]
                print(f"   ‚úì Sample portfolio: {sample_portfolio.get('full_name', 'Unknown')}")
                print(f"   ‚úì Portfolio score: {sample_portfolio.get('portfolio_score', 0)}")
                print(f"   ‚úì Verified: {sample_portfolio.get('is_verified', False)}")
        else:
            print("   ‚ùå Featured portfolios retrieval failed")
        
        # Test 3: Portfolio Categorization - POST /api/portfolio/category/update
        portfolio_tests_total += 1
        category_data = {
            "primary_category": "Web Development",
            "secondary_categories": ["Mobile Development", "UI/UX Design"],
            "portfolio_tags": ["React", "Node.js", "MongoDB", "FastAPI", "Python"],
            "specializations": ["Full-Stack Development", "API Development", "Database Design"]
        }
        
        success, response = self.run_test(
            "Portfolio Showcase - Update Portfolio Categories",
            "POST",
            "/api/portfolio/category/update",
            200,
            data=category_data,
            token=self.freelancer_token
        )
        
        if success and 'categories' in response:
            portfolio_tests_passed += 1
            print(f"   ‚úì Portfolio categories updated successfully")
            print(f"   ‚úì Primary category: {response['categories'].get('primary_category', 'Unknown')}")
            print(f"   ‚úì Secondary categories: {len(response['categories'].get('secondary_categories', []))}")
            print(f"   ‚úì Portfolio tags: {len(response['categories'].get('portfolio_tags', []))}")
            print(f"   ‚úì Specializations: {len(response['categories'].get('specializations', []))}")
        else:
            print("   ‚ùå Portfolio categories update failed")
        
        # Test 4: Advanced Portfolio Search - POST /api/portfolio/search/advanced
        portfolio_tests_total += 1
        search_data = {
            "query": "React",
            "categories": ["Web Development"],
            "technologies": ["React", "Node.js"],
            "min_projects": 0,
            "min_rating": 0,
            "verified_only": False,  # Set to False since test user may not be verified
            "page": 1,
            "limit": 10
        }
        
        success, response = self.run_test(
            "Portfolio Showcase - Advanced Portfolio Search",
            "POST",
            "/api/portfolio/search/advanced",
            200,
            data=search_data
        )
        
        if success and 'portfolios' in response:
            portfolio_tests_passed += 1
            found_portfolios = len(response['portfolios'])
            print(f"   ‚úì Advanced search completed: {found_portfolios} portfolios found")
            print(f"   ‚úì Total results: {response.get('total', 0)}")
            print(f"   ‚úì Current page: {response.get('page', 1)}")
            print(f"   ‚úì Total pages: {response.get('pages', 1)}")
            
            if found_portfolios > 0:
                sample_result = response['portfolios'][0]
                print(f"   ‚úì Sample result: {sample_result.get('full_name', 'Unknown')}")
                print(f"   ‚úì Project count: {sample_result.get('project_count', 0)}")
                print(f"   ‚úì Portfolio score: {sample_result.get('portfolio_score', 0)}")
        else:
            print("   ‚ùå Advanced portfolio search failed")
        
        # Test 5: Portfolio Analytics - GET /api/portfolio/analytics/{freelancer_id}
        portfolio_tests_total += 1
        success, response = self.run_test(
            "Portfolio Showcase - Get Portfolio Analytics",
            "GET",
            f"/api/portfolio/analytics/{self.freelancer_user['id']}",
            200,
            token=self.freelancer_token
        )
        
        if success and 'overview' in response:
            portfolio_tests_passed += 1
            print(f"   ‚úì Portfolio analytics retrieved successfully")
            print(f"   ‚úì Total files: {response['overview'].get('total_files', 0)}")
            print(f"   ‚úì Total projects: {response['overview'].get('total_projects', 0)}")
            print(f"   ‚úì Verification status: {response['overview'].get('verification_status', False)}")
            print(f"   ‚úì Profile completion: {response['overview'].get('profile_completion', False)}")
            
            # Check analytics sections
            if 'file_breakdown' in response:
                breakdown = response['file_breakdown']
                print(f"   ‚úì File breakdown - Images: {breakdown.get('images', 0)}, Videos: {breakdown.get('videos', 0)}")
            
            if 'project_analytics' in response:
                project_analytics = response['project_analytics']
                print(f"   ‚úì Projects with URLs: {project_analytics.get('projects_with_urls', 0)}")
                print(f"   ‚úì Avg technologies per project: {project_analytics.get('avg_technologies_per_project', 0):.1f}")
            
            if 'recommendations' in response:
                recommendations = response['recommendations']
                print(f"   ‚úì Recommendations: {len(recommendations)} suggestions")
        else:
            print("   ‚ùå Portfolio analytics retrieval failed")
        
        # Test 6: Portfolio Analytics Access Control - Admin Access
        if self.admin_token:
            portfolio_tests_total += 1
            success, response = self.run_test(
                "Portfolio Showcase - Admin Access to Analytics",
                "GET",
                f"/api/portfolio/analytics/{self.freelancer_user['id']}",
                200,
                token=self.admin_token
            )
            
            if success:
                portfolio_tests_passed += 1
                print(f"   ‚úì Admin can access freelancer analytics")
            else:
                print("   ‚ùå Admin access to analytics failed")
        
        # Test 7: Portfolio Analytics Access Control - Unauthorized Access
        if self.client_token:
            portfolio_tests_total += 1
            success, response = self.run_test(
                "Portfolio Showcase - Unauthorized Analytics Access",
                "GET",
                f"/api/portfolio/analytics/{self.freelancer_user['id']}",
                403,
                token=self.client_token
            )
            
            if success:
                portfolio_tests_passed += 1
                print(f"   ‚úì Unauthorized access properly blocked")
            else:
                print("   ‚ùå Unauthorized access not properly blocked")
        
        # Test 8: Portfolio Categorization Access Control - Non-Freelancer
        if self.client_token:
            portfolio_tests_total += 1
            success, response = self.run_test(
                "Portfolio Showcase - Non-Freelancer Category Update",
                "POST",
                "/api/portfolio/category/update",
                403,
                data=category_data,
                token=self.client_token
            )
            
            if success:
                portfolio_tests_passed += 1
                print(f"   ‚úì Non-freelancer properly blocked from category updates")
            else:
                print("   ‚ùå Non-freelancer access not properly blocked")
        
        # Test 9: Portfolio Showcase with Non-Existent Freelancer
        portfolio_tests_total += 1
        success, response = self.run_test(
            "Portfolio Showcase - Non-Existent Freelancer",
            "GET",
            "/api/portfolio/showcase/non-existent-id",
            404
        )
        
        if success:
            portfolio_tests_passed += 1
            print(f"   ‚úì Non-existent freelancer properly returns 404")
        else:
            print("   ‚ùå Non-existent freelancer handling failed")
        
        # Test 10: Advanced Search with Various Filter Combinations
        portfolio_tests_total += 1
        complex_search_data = {
            "query": "developer",
            "categories": ["Web Development", "Mobile Development"],
            "technologies": ["Python", "JavaScript"],
            "min_projects": 0,  # Set to 0 for testing
            "min_rating": 0,    # Set to 0 for testing
            "location": "",     # Empty for testing
            "verified_only": False,  # Set to False for testing
            "page": 1,
            "limit": 5
        }
        
        success, response = self.run_test(
            "Portfolio Showcase - Complex Advanced Search",
            "POST",
            "/api/portfolio/search/advanced",
            200,
            data=complex_search_data
        )
        
        if success:
            portfolio_tests_passed += 1
            print(f"   ‚úì Complex search filters working correctly")
            print(f"   ‚úì Results: {len(response.get('portfolios', []))} portfolios")
        else:
            print("   ‚ùå Complex search filters failed")
        
        # Summary
        print(f"\nüìä PORTFOLIO SHOWCASE SYSTEM TESTING SUMMARY")
        print("=" * 60)
        
        success_rate = (portfolio_tests_passed / portfolio_tests_total) * 100 if portfolio_tests_total > 0 else 0
        
        print(f"‚úÖ PORTFOLIO TESTS PASSED: {portfolio_tests_passed}/{portfolio_tests_total} ({success_rate:.1f}%)")
        print("\nüéØ PORTFOLIO FEATURES TESTED:")
        print("   ‚úì Enhanced Portfolio Showcase with comprehensive data")
        print("   ‚úì Featured Portfolios with scoring and sorting")
        print("   ‚úì Portfolio Categorization with tags and specializations")
        print("   ‚úì Advanced Portfolio Search with multiple filters")
        print("   ‚úì Portfolio Analytics with detailed insights")
        print("   ‚úì Role-based access control and authentication")
        print("   ‚úì Error handling for non-existent resources")
        print("   ‚úì Complex search filter combinations")
        print("   ‚úì Data structure validation and integrity")
        print("   ‚úì Integration with existing portfolio file system")
        
        if success_rate >= 90:
            print("\nüéâ PORTFOLIO SHOWCASE SYSTEM WORKING EXCELLENTLY!")
        elif success_rate >= 75:
            print("\n‚úÖ PORTFOLIO SHOWCASE SYSTEM WORKING WELL!")
        else:
            print("\n‚ö†Ô∏è PORTFOLIO SHOWCASE SYSTEM NEEDS ATTENTION!")
        
        return portfolio_tests_passed, portfolio_tests_total

if __name__ == "__main__":
    tester = PortfolioAPITester()
    
    # Run Phase 2 Portfolio Showcase System tests as requested
    print("üöÄ PHASE 2 PORTFOLIO SHOWCASE SYSTEM TESTING")
    print(f"üåê Base URL: {tester.base_url}")
    print("=" * 80)
    
    # Set up test users
    if not tester.setup_test_users():
        print("‚ùå Failed to set up test users")
        sys.exit(1)
    
    # Run portfolio showcase tests
    portfolio_passed, portfolio_total = tester.test_portfolio_showcase_system()
    
    # Print final results
    print("\n" + "="*80)
    print("üìä PHASE 2 PORTFOLIO SHOWCASE TEST RESULTS")
    print("="*80)
    print(f"üé® Portfolio Tests: {portfolio_passed}/{portfolio_total} passed ({(portfolio_passed/portfolio_total*100):.1f}%)")
    
    # Special focus on portfolio system results
    portfolio_percentage = (portfolio_passed / portfolio_total * 100) if portfolio_total > 0 else 0
    print(f"\nüéØ PORTFOLIO SHOWCASE SYSTEM: {portfolio_passed}/{portfolio_total} tests passed ({portfolio_percentage:.1f}%)")
    
    if portfolio_percentage >= 90:
        print("üéâ PORTFOLIO SHOWCASE SYSTEM: EXCELLENT! All portfolio features working perfectly!")
    elif portfolio_percentage >= 75:
        print("‚úÖ PORTFOLIO SHOWCASE SYSTEM: GOOD! Most portfolio features working correctly.")
    elif portfolio_percentage >= 50:
        print("‚ö†Ô∏è  PORTFOLIO SHOWCASE SYSTEM: FAIR! Some portfolio issues need attention.")
    else:
        print("‚ùå PORTFOLIO SHOWCASE SYSTEM: NEEDS WORK! Multiple portfolio issues found.")
    
    print("="*80)