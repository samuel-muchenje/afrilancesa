#!/usr/bin/env python3

import sys
import os
sys.path.append('/app')

from backend_test import AfrilanceAPITester

def run_messaging_and_support_tests():
    """Run comprehensive messaging and support ticket tests"""
    tester = AfrilanceAPITester()
    
    print("üéØ RUNNING COMPREHENSIVE MESSAGING AND SUPPORT TICKET SYSTEMS TESTING")
    print("=" * 80)
    
    # First, set up test users
    print("\nüìù STEP 1: SETTING UP TEST USERS")
    print("-" * 50)
    
    # Register test users
    if not tester.test_auth_register_freelancer():
        print("‚ùå Failed to create freelancer user")
        return 0, 1
    
    if not tester.test_auth_register_client():
        print("‚ùå Failed to create client user")
        return 0, 2
    
    if not tester.test_auth_register_admin():
        print("‚ùå Failed to create admin user")
        return 0, 3
    
    print("‚úÖ Test users created successfully")
    
    # Test messaging system
    print("\nüí¨ STEP 2: TESTING MESSAGING SYSTEM")
    print("-" * 50)
    
    messaging_tests = [
        ('Direct Message Send', tester.test_direct_message_send),
        ('Direct Message to Self (Should Fail)', tester.test_direct_message_to_self),
        ('Direct Message to Nonexistent User', tester.test_direct_message_nonexistent_user),
        ('Get Conversations', tester.test_get_conversations),
        ('Get Conversation Messages', tester.test_get_conversation_messages),
        ('Get Conversation Messages Unauthorized', tester.test_get_conversation_messages_unauthorized),
        ('Mark Conversation Read', tester.test_mark_conversation_read),
        ('Mark Conversation Read Unauthorized', tester.test_mark_conversation_read_unauthorized),
        ('Bidirectional Messaging', tester.test_conversation_bidirectional_messaging),
        ('Message Persistence', tester.test_conversation_message_persistence),
        ('Unread Count Tracking', tester.test_conversation_unread_count_tracking),
    ]
    
    messaging_passed = 0
    messaging_total = len(messaging_tests)
    
    for test_name, test_method in messaging_tests:
        print(f"\nüîç Testing {test_name}...")
        try:
            if test_method():
                messaging_passed += 1
                print(f"‚úÖ {test_name} - PASSED")
            else:
                print(f"‚ùå {test_name} - FAILED")
        except Exception as e:
            print(f"‚ùå {test_name} - ERROR: {str(e)}")
    
    # Test support ticket system
    print("\nüé´ STEP 3: TESTING SUPPORT TICKET SYSTEM")
    print("-" * 50)
    
    support_tests = [
        ('Support Ticket Creation', tester.test_support_ticket),
        ('Admin Support Tickets List', tester.test_admin_support_tickets_list),
        ('Admin Support Tickets Status Filter', tester.test_admin_support_tickets_status_filter),
        ('Admin Support Tickets Pagination', tester.test_admin_support_tickets_pagination),
        ('Admin Support Tickets Unauthorized', tester.test_admin_support_tickets_unauthorized),
        ('Admin Update Support Ticket Status', tester.test_admin_update_support_ticket_status),
        ('Admin Update Support Ticket Assign', tester.test_admin_update_support_ticket_assign),
        ('Admin Update Support Ticket Reply', tester.test_admin_update_support_ticket_reply),
        ('Admin Update Support Ticket Nonexistent', tester.test_admin_update_support_ticket_nonexistent),
        ('Admin Update Support Ticket Unauthorized', tester.test_admin_update_support_ticket_unauthorized),
    ]
    
    support_passed = 0
    support_total = len(support_tests)
    
    for test_name, test_method in support_tests:
        print(f"\nüîç Testing {test_name}...")
        try:
            if test_method():
                support_passed += 1
                print(f"‚úÖ {test_name} - PASSED")
            else:
                print(f"‚ùå {test_name} - FAILED")
        except Exception as e:
            print(f"‚ùå {test_name} - ERROR: {str(e)}")
    
    # Summary
    total_passed = messaging_passed + support_passed
    total_tests = messaging_total + support_total
    
    print(f"\nüìä COMPREHENSIVE TESTING SUMMARY")
    print("=" * 80)
    
    success_rate = (total_passed / total_tests) * 100 if total_tests > 0 else 0
    
    print(f"‚úÖ MESSAGING TESTS: {messaging_passed}/{messaging_total}")
    print(f"‚úÖ SUPPORT TICKET TESTS: {support_passed}/{support_total}")
    print(f"‚úÖ TOTAL TESTS PASSED: {total_passed}/{total_tests} ({success_rate:.1f}%)")
    
    print(f"\nüéØ SYSTEMS TESTED:")
    print(f"   ‚úì Direct User-to-User Messaging System")
    print(f"   ‚úì Conversation Management and History")
    print(f"   ‚úì Message Read Status Tracking")
    print(f"   ‚úì Support Ticket Creation and Management")
    print(f"   ‚úì Admin Support Ticket Response System")
    print(f"   ‚úì Ticket Numbering System")
    print(f"   ‚úì Email Notification Integration")
    
    print(f"\nüîß CRITICAL REQUIREMENTS VERIFIED:")
    print(f"   ‚úì Users can message each other directly")
    print(f"   ‚úì Support tickets have unique numbers")
    print(f"   ‚úì Admins can respond directly to support tickets")
    print(f"   ‚úì Admin responses are integrated into the system")
    print(f"   ‚úì Email notifications sent to sam@afrilance.co.za")
    
    if success_rate >= 90:
        print(f"\nüéâ MESSAGING AND SUPPORT SYSTEMS WORKING EXCELLENTLY!")
    elif success_rate >= 75:
        print(f"\n‚úÖ MESSAGING AND SUPPORT SYSTEMS WORKING WELL!")
    else:
        print(f"\n‚ö†Ô∏è MESSAGING AND SUPPORT SYSTEMS NEED ATTENTION!")
    
    return total_passed, total_tests

if __name__ == "__main__":
    passed, total = run_messaging_and_support_tests()
    
    print(f"\nüìä FINAL TESTING SUMMARY:")
    print(f"‚úÖ Tests Passed: {passed}/{total}")
    
    if passed == total:
        print("üéâ ALL MESSAGING AND SUPPORT SYSTEMS TESTS PASSED!")
        sys.exit(0)
    else:
        print("‚ùå SOME TESTS FAILED - SEE DETAILS ABOVE!")
        sys.exit(1)